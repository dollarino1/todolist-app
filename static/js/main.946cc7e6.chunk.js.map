{"version":3,"sources":["components/Main/MyTasks.jsx","components/Main/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["MyTasks","props","useState","setEditMode","taskText","setTaskText","useEffect","deleteTaskHandler","setTodos","todos","filter","el","id","todo","completeTaskHandler","map","item","completed","_uniqueId","className","type","checked","onClick","name","for","onDoubleClick","Main","formik","useFormik","initialValues","task","onSubmit","values","console","log","Math","random","resetForm","validate","errors","statusTaskHandler","e","setStatus","target","value","taskElements","filteredTodos","handleSubmit","class","onChange","handleChange","placeholder","autoComplete","App","status","setFilteredTodos","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.946cc7e6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport _uniqueId from 'lodash/uniqueId'\r\n\r\nconst MyTasks = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [taskText, setTaskText] = useState(props.taskText)\r\n    \r\n    useEffect(() => {\r\n        setTaskText(props.taskText)\r\n    }, [props.taskText])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        debugger\r\n        props.updateTaskText(taskText)\r\n    }\r\n    const onTaskTextChange = (e) => {\r\n        setTaskText(e.target.value)\r\n    }\r\n    const deleteTaskHandler = () => {\r\n        props.setTodos(props.todos.filter(el => el.id !== props.todo.id))\r\n    } \r\n    const completeTaskHandler = () => {\r\n        props.setTodos(props.todos.map((item) => {\r\n            if (item.id === props.todo.id) {\r\n                return {\r\n                    ...item,\r\n                    completed: !item.completed\r\n                }\r\n            }\r\n            return item\r\n        }))\r\n    }\r\n    //generate random id for input and label(for proper work of css animation)\r\n    const [id] = useState(_uniqueId('prefix-'))\r\n\r\n    return (\r\n        <>\r\n            {props.completed \r\n            ? <div id='checklist' className=\"main__task\">\r\n            <input id={id} type=\"checkbox\" checked onClick={completeTaskHandler} name=\"taskCheckbox\"/>\r\n            <label for={id} >{props.taskText}</label>\r\n            <a className='close' onClick={deleteTaskHandler}></a>\r\n            </div> \r\n            : <div id='checklist' className=\"main__task\">\r\n            <input id={id} type=\"checkbox\" onClick={completeTaskHandler} name=\"taskCheckbox\"/>\r\n            <label onDoubleClick={activateEditMode} for={id} >{props.taskText}</label>\r\n            <a className='close' onClick={deleteTaskHandler}></a>\r\n            </div>}\r\n        </>\r\n        /*<> \r\n            /*{editMode\r\n            ? <div className=\"main__task\">\r\n            <input onChange={onTaskTextChange} autoFocus={true} onBlur={deactivateEditMode}\r\n            value={taskText} id={id} type=\"text\" name=\"taskCheckbox\"/>\r\n            </div>\r\n            : <div id='checklist' className=\"main__task\">\r\n            <input id={id} type=\"checkbox\" onClick={completeTaskHandler} name=\"taskCheckbox\"/>\r\n            <label onDoubleClick={activateEditMode} for={id} >{props.taskText}</label>\r\n            <a className='close' onClick={deleteTaskHandler}></a>\r\n            </div>\r\n            } \r\n        </>*/\r\n    )\r\n}\r\nexport default MyTasks","import { useFormik } from 'formik'\r\nimport React from 'react'\r\nimport MyTasks from './MyTasks'\r\n\r\nconst Main = (props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            task: \"\"\r\n        },\r\n        onSubmit: (values) => {\r\n            console.log(values)\r\n            props.setTodos([...props.todos, {taskText: values.task, completed: false, id: Math.random() * 1000}])\r\n            formik.resetForm(formik.initialValues)\r\n        },\r\n        validate: values => {\r\n            let errors = {}\r\n\r\n            if(!values.task) {\r\n                errors.task = \"Required\"\r\n            }\r\n\r\n            return errors\r\n        }\r\n    })\r\n    const statusTaskHandler = (e) => {\r\n        props.setStatus(e.target.value)\r\n        console.log(e.target.value)\r\n    }\r\n    let taskElements = props.filteredTodos.map((todo) => <MyTasks key={todo.id} taskText={todo.taskText} \r\n                                                        setTodos={props.setTodos} todos={props.todos} \r\n                                                        todo={todo} completed={todo.completed}/>)\r\n\r\n    return <div className=\"main__section\">\r\n        <form className=\"main__form\" onSubmit={formik.handleSubmit}>\r\n            <div className=\"Wrapper\">\r\n                <h1 className=\"Title\">To-Do List App</h1>\r\n                <div className=\"Input\">\r\n                    <input type=\"text\" id=\"input\" class=\"Input-text\" name='task' \r\n                    onChange={formik.handleChange} value={formik.values.task}\r\n                    placeholder=\"Write new task\" autoComplete='off' />\r\n                    <label for=\"input\" class=\"Input-label\">Your task</label>\r\n                </div>\r\n            </div>\r\n        </form>\r\n        <div className=\"main__filter\">\r\n            <button onClick={statusTaskHandler} value=\"completed\" className=\"main__filterOption\">Completed</button>\r\n            <button onClick={statusTaskHandler} value=\"all\" className=\"main__filterOption\">All</button>\r\n            <button onClick={statusTaskHandler} value=\"uncompleted\" className=\"main__filterOption\">Uncompleted</button>\r\n        </div>\r\n        <div className='main__tasklist'>\r\n            <h2>My tasks</h2>\r\n            {taskElements}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Main","import './css/App.css';\nimport React, { useState, useEffect } from 'react'\nimport Main from './components/Main/Main';\n\nfunction App() {\n  const [todos, setTodos] = useState([])\n  const [status, setStatus] = useState('all')\n  const [filteredTodos, setFilteredTodos] = useState([])\n\n  useEffect(() => {\n    getLocalTodos()\n  }, [])\n  useEffect (() => {\n    filterHandler()\n    saveLocalTodos()\n  }, [todos, status])\n\n  const filterHandler = () => {\n    switch(status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed == true))\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed == false))\n        break;\n      default:\n        setFilteredTodos(todos)\n        break;\n    }\n  }\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]))\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem('todos'))\n      setTodos(todoLocal)\n    }\n  }\n  return (\n      <div className=\"App__wrapper\">\n        <Main filteredTodos={filteredTodos} setStatus={setStatus} setTodos={setTodos} todos={todos} />\n      </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n      <App />\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}